import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import LayoutPrincipal from "../../components/LayoutPrincipal";
import ServicoItem from "../../components/ServicoItem";

function Servicos() {
    const [busca, setBusca] = useState("");
    const [paginaAtual, setPaginaAtual] = useState(1);
    const itensPorPagina = 3; // Definindo quantos itens por p√°gina
    const navigate = useNavigate();  // Usando o hook para navega√ß√£o

    // Todos os servi√ßos, incluindo os novos
    const servicos = [
        { id: 1, nome: "Limpeza e Profilaxia", descricao: "Procedimento para remover placas bacterianas e t√°rtaro, prevenindo c√°ries e doen√ßas periodontais.", icone: "ü¶∑" },
        { id: 2, nome: "Clareamento Dental", descricao: "Tratamento est√©tico que remove manchas e devolve o branco natural dos dentes com resultados duradouros.", icone: "‚ú®" },
        { id: 3, nome: "Restaura√ß√µes", descricao: "Recupera√ß√£o de dentes danificados por c√°ries ou fraturas utilizando materiais de alta qualidade e durabilidade.", icone: "üîß" },
        { id: 4, nome: "Tratamento de Canal", descricao: "Procedimento que remove a infec√ß√£o da polpa dent√°ria, preservando o dente natural e aliviando a dor.", icone: "ü¶†" },
        { id: 5, nome: "Implantes Dent√°rios", descricao: "Solu√ß√£o definitiva para substitui√ß√£o de dentes perdidos com apar√™ncia e fun√ß√£o semelhantes aos dentes naturais.", icone: "üî©" },
        { id: 6, nome: "Ortodontia", descricao: "Corre√ß√£o do alinhamento dos dentes e problemas de mordida com aparelhos fixos ou remov√≠veis.", icone: "üìè" },
        { id: 7, nome: "Pr√≥teses Dent√°rias", descricao: "Reposi√ß√£o de dentes ausentes com pr√≥teses fixas ou remov√≠veis, devolvendo fun√ß√£o e est√©tica.", icone: "üëÑ" },
        { id: 8, nome: "Odontopediatria", descricao: "Cuidados especializados para a sa√∫de bucal das crian√ßas, com foco na preven√ß√£o e educa√ß√£o.", icone: "üë∂" },
        // Servi√ßos adicionais
        { id: 9, nome: "Al√≠vio de Dor Intensa / Odontalgia", descricao: "Atendimento imediato para dor de dente aguda. Pode ser necess√°rio tratamento com medicamentos ou procedimentos r√°pidos.", icone: "ü¶∑" },
        { id: 10, nome: "Tratamento de Abscesso Dent√°rio", descricao: "Drenagem e tratamento de infec√ß√µes na raiz do dente ou gengiva, que podem causar incha√ßo e febre.", icone: "ü¶†" },
        { id: 11, nome: "Reparo de Dente Quebrado ou Fraturado", descricao: "Corre√ß√£o de dentes lascados ou partidos, seja com resina, coroa tempor√°ria ou cimenta√ß√£o.", icone: "üîß" },
        { id: 12, nome: "Avuls√£o Dent√°ria (Dente Arrancado)", descricao: "Tentativa de reimplante do dente perdido (em casos de trauma).", icone: "‚ö†Ô∏è" },
        { id: 13, nome: "Canal de Urg√™ncia", descricao: "In√≠cio de tratamento endod√¥ntico para aliviar dor intensa causada por infec√ß√£o ou inflama√ß√£o do nervo do dente.", icone: "‚ö°" },
    ];

    // Filtrando os servi√ßos com base na busca
    const servicosFiltrados = servicos.filter((servico) =>
        servico.nome.toLowerCase().includes(busca.toLowerCase())
    );

    // Pagina√ß√£o: selecionando os itens da p√°gina atual
    const indexDoUltimoServico = paginaAtual * itensPorPagina;
    const indexDoPrimeiroServico = indexDoUltimoServico - itensPorPagina;
    const servicosNaPagina = servicosFiltrados.slice(indexDoPrimeiroServico, indexDoUltimoServico);

    // Alterar a p√°gina
    const handlePagina = (pagina) => {
        setPaginaAtual(pagina);
    };

    // Fun√ß√£o para navegar para a tela de MeusAgendamentos
    const handleAgendar = (codigo) => {
        // Redireciona para a p√°gina de agendamentos
        navigate("/agendamentos");
    };

    return (
        <LayoutPrincipal>
            <div className="w-full h-full flex flex-col">
                <div className="flex-grow px-4 md:px-12 py-10">
                    {/* Barra de navega√ß√£o */}
                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-3xl font-bold text-custom-teal">Servi√ßos Dispon√≠veis</h2>
                        <input
                            type="text"
                            placeholder="Buscar procedimento"
                            value={busca}
                            onChange={(e) => setBusca(e.target.value)}
                            className="w-full md:w-1/3 p-2 border border-gray-300 rounded"
                        />
                    </div>

                    {/* Tabela de servi√ßos */}
                    <div className="overflow-x-auto mb-8">
                        <table className="w-full table-auto text-left">
                            <thead>
                                <tr className="bg-gray-100 text-gray-700">
                                    <th className="py-2 px-4">C√≥digo</th>
                                    <th className="py-2 px-4">Nome do Procedimento</th>
                                    <th className="py-2 px-4">Descri√ß√£o</th>
                                    <th className="py-2 px-4">A√ß√£o</th>
                                </tr>
                            </thead>
                            <tbody>
                                {servicosNaPagina.map((servico) => (
                                    <ServicoItem
                                        key={servico.id}
                                        codigo={servico.id}
                                        nome={servico.nome}
                                        descricao={servico.descricao}
                                        icone={servico.icone}
                                        onAgendar={() => handleAgendar(servico.id)}  // Chama a fun√ß√£o de navega√ß√£o
                                    />
                                ))}
                            </tbody>
                        </table>
                    </div>

                    {/* Pagina√ß√£o */}
                    <div className="mt-6 flex justify-center space-x-2">
                        {/* Bot√£o para a p√°gina anterior */}
                        <button
                            onClick={() => handlePagina(paginaAtual - 1)}
                            disabled={paginaAtual === 1}
                            className="w-8 h-8 bg-gray-200 text-black rounded"
                        >
                            &lt;
                        </button>

                        {/* Bot√µes de p√°gina */}
                        {Array.from({ length: Math.ceil(servicosFiltrados.length / itensPorPagina) }, (_, i) => (
                            <button
                                key={i}
                                onClick={() => handlePagina(i + 1)}
                                className={`w-8 h-8 rounded ${paginaAtual === i + 1 ? 'bg-black text-white' : 'bg-gray-200'}`}
                            >
                                {i + 1}
                            </button>
                        ))}

                        {/* Bot√£o para a pr√≥xima p√°gina */}
                        <button
                            onClick={() => handlePagina(paginaAtual + 1)}
                            disabled={paginaAtual === Math.ceil(servicosFiltrados.length / itensPorPagina)}
                            className="w-8 h-8 bg-gray-200 text-black rounded"
                        >
                            &gt;
                        </button>
                    </div>
                </div>
            </div>
        </LayoutPrincipal>
    );
}

export default Servicos;
